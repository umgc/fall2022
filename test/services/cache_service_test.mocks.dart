// Mocks generated by Mockito 5.3.2 from annotations
// in summer2022/test/services/cache_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:summer2022/models/MailPiece.dart' as _i4;
import 'package:summer2022/models/Notification.dart' as _i7;
import 'package:summer2022/models/NotificationSubscription.dart' as _i6;
import 'package:summer2022/services/mail_fetcher.dart' as _i2;
import 'package:summer2022/services/mail_notifier.dart' as _i5;
import 'package:summer2022/services/mailPiece_storage.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDateTime_0 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MailFetcher].
///
/// See the documentation for Mockito's code generation for more information.
class MockMailFetcher extends _i1.Mock implements _i2.MailFetcher {
  @override
  _i3.Future<List<_i4.MailPiece>> fetchMail(DateTime? lastTimestamp) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchMail,
          [lastTimestamp],
        ),
        returnValue: _i3.Future<List<_i4.MailPiece>>.value(<_i4.MailPiece>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i4.MailPiece>>.value(<_i4.MailPiece>[]),
      ) as _i3.Future<List<_i4.MailPiece>>);
}

/// A class which mocks [MailNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockMailNotifier extends _i1.Mock implements _i5.MailNotifier {
  @override
  _i3.Future<bool> createSubscription(
          _i6.NotificationSubscription? subscription) =>
      (super.noSuchMethod(
        Invocation.method(
          #createSubscription,
          [subscription],
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
  @override
  _i3.Future<void> removeSubscription(
          _i6.NotificationSubscription? subscription) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeSubscription,
          [subscription],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<List<_i6.NotificationSubscription>> getSubscriptions() =>
      (super.noSuchMethod(
        Invocation.method(
          #getSubscriptions,
          [],
        ),
        returnValue: _i3.Future<List<_i6.NotificationSubscription>>.value(
            <_i6.NotificationSubscription>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i6.NotificationSubscription>>.value(
                <_i6.NotificationSubscription>[]),
      ) as _i3.Future<List<_i6.NotificationSubscription>>);
  @override
  _i3.Future<List<_i7.Notification>> getNotifications() => (super.noSuchMethod(
        Invocation.method(
          #getNotifications,
          [],
        ),
        returnValue:
            _i3.Future<List<_i7.Notification>>.value(<_i7.Notification>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i7.Notification>>.value(<_i7.Notification>[]),
      ) as _i3.Future<List<_i7.Notification>>);
  @override
  _i3.Future<void> clearNotification(_i7.Notification? notification) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearNotification,
          [notification],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> clearAllNotifications() => (super.noSuchMethod(
        Invocation.method(
          #clearAllNotifications,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> clearAllSubscriptions() => (super.noSuchMethod(
        Invocation.method(
          #clearAllSubscriptions,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> updateNotifications(DateTime? lastTimestamp) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateNotifications,
          [lastTimestamp],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [MailStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockMailStorage extends _i1.Mock implements _i8.MailPieceStorage {
  @override
  _i3.Future<DateTime> get lastTimestamp => (super.noSuchMethod(
        Invocation.getter(#lastTimestamp),
        returnValue: _i3.Future<DateTime>.value(_FakeDateTime_0(
          this,
          Invocation.getter(#lastTimestamp),
        )),
        returnValueForMissingStub: _i3.Future<DateTime>.value(_FakeDateTime_0(
          this,
          Invocation.getter(#lastTimestamp),
        )),
      ) as _i3.Future<DateTime>);
  @override
  _i3.Future<bool> saveMailPiece(_i4.MailPiece? piece) => (super.noSuchMethod(
        Invocation.method(
          #saveMailPiece,
          [piece],
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
  @override
  _i3.Future<_i4.MailPiece?> getMailPiece(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getMailPiece,
          [id],
        ),
        returnValue: _i3.Future<_i4.MailPiece?>.value(),
        returnValueForMissingStub: _i3.Future<_i4.MailPiece?>.value(),
      ) as _i3.Future<_i4.MailPiece?>);
  @override
  _i3.Future<bool> updateMailPiece(
    String? id,
    _i4.MailPiece? updated,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateMailPiece,
          [
            id,
            updated,
          ],
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
  @override
  _i3.Future<bool> deleteMailPiece(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteMailPiece,
          [id],
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
  @override
  _i3.Future<bool> deleteAllMailPieces() => (super.noSuchMethod(
        Invocation.method(
          #deleteAllMailPieces,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
  @override
  _i3.Future<List<_i4.MailPiece>> searchMailsPieces(String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchMailsPieces,
          [query],
        ),
        returnValue: _i3.Future<List<_i4.MailPiece>>.value(<_i4.MailPiece>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i4.MailPiece>>.value(<_i4.MailPiece>[]),
      ) as _i3.Future<List<_i4.MailPiece>>);
}
